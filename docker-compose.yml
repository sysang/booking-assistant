version: "3.4"

x-database-credentials: &database-credentials
  DB_HOST: "db"
  DB_PORT: "5432"
  DB_USER: "${DB_USER}"
  DB_PASSWORD: "${DB_PASSWORD}"
  DB_LOGIN_DB: "${DB_DATABASE}"

x-rabbitmq-credentials: &rabbitmq-credentials
  RABBITMQ_HOST: "rabbit"
  RABBITMQ_USERNAME: "user"
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

x-redis-credentials: &redis-credentials
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_DB: "1"
  REDIS_CACHE_DB: "2"
  ACCEPTABLE_QUERY_COUNT_NUMBER: "50000"
  
x-duckling-credentials: &duckling-credentials
  RASA_DUCKLING_HTTP_URL: "http://duckling:8000"

x-nginx-host-variables: &nginx-host-variables
  RASA_X_HOST: "rasa-x:5002"
  RASA_USER_APP: "action-server:5055"
  RASA_PRODUCTION_HOST: "rasa-production:5005"
  BOT_FRONTEND_HOST: "botfrontend:8000"

x-rasax-credentials: &rasax-credentials
  RASA_X_HOST: "http://rasa-x:5002"
  RASA_X_USERNAME: ${RASA_X_USERNAME:-admin}
  RASA_X_PASSWORD: ${RASA_X_PASSWORD:-}
  RASA_X_TOKEN: ${RASA_X_TOKEN}
  JWT_SECRET: ${JWT_SECRET}
  RASA_USER_APP: "http://action-server:5055"
  RASA_PRODUCTION_HOST: "http://rasa-production:5005"
  # RASA_WORKER_HOST: "http://rasa-worker:5005"
  RASA_TOKEN: ${RASA_TOKEN}

x-rasa-credentials: &rasa-credentials
  <<: *rasax-credentials
  <<: *duckling-credentials
  <<: *database-credentials
  <<: *redis-credentials
  <<: *rabbitmq-credentials
  RASA_TOKEN: ${RASA_TOKEN}
  RASA_MODEL_PULL_INTERVAL: 10
  RABBITMQ_QUEUE: "rasa_production_events"
  RASA_TELEMETRY_ENABLED: ${RASA_TELEMETRY_ENABLED:-true}


x-rasa-services: &default-rasa-service
  restart: on-failure:5
  image: "sysang/rasaserver"
  build:
    context: "./botserver-app"
    args:
      RASA_IMAGE: ${RASA_IMAGE}
  expose:
    - "5005"
  command: >
    x
    --no-prompt
    --production
    --config-endpoint http://rasa-x:5002/api/config?token=${RASA_X_TOKEN}
    --port 5005
    --jwt-method HS256
    --jwt-secret ${JWT_SECRET}
    --auth-token '${RASA_TOKEN}'
    --cors "*"
    -vv
  depends_on:
    - rasa-x
    - rabbit
    - redis

services:
  rasa-x:
    restart: on-failure:5
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    expose:
      - "5002"
    volumes:
      - ./botserver-app/models:/app/models
      - ./botserver-app/environments.yml:/app/environments.yml
      - ./botserver-app/credentials.yml:/app/credentials.yml
      - ./botserver-app/endpoints.yml:/app/endpoints.yml
      - ./botserver-app/logs:/logs
      - ./botserver-app/auth:/app/auth
    environment:
      <<: *database-credentials
      <<: *rasa-credentials
      SELF_PORT: "5002"
      RASA_MODEL_DIR: "/app/models"
      DB_DATABASE: "${DB_DATABASE}"
      PASSWORD_SALT: ${PASSWORD_SALT}
      RABBITMQ_QUEUE: "rasa_production_events"
      RASA_X_USER_ANALYTICS: "0"
      SANIC_RESPONSE_TIMEOUT: "3600"
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
    depends_on:
      - db

  db-migration:
    entrypoint: ["python"]
    command: ["-m", "rasax.community.services.db_migration_service"]
    restart: on-failure:5
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || kill 1"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 2s
    expose:
      - "8000"
    environment:
      <<: *database-credentials
      DB_DATABASE: "${DB_DATABASE}"
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
      MPLCONFIGDIR: "/tmp/.matplotlib"
    depends_on:
      - db

  rasa-production:
    <<: *default-rasa-service
    volumes:
      - ./botserver-app/addons:/app/addons
    environment:
      <<: *rasa-credentials
      RASA_ENVIRONMENT: "production"
      DB_DATABASE: "tracker"
      MPLCONFIGDIR: "/tmp/.matplotlib"
      RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"

  # rasa-worker:
  #   <<: *default-rasa-service
  #   volumes:
  #     - ./botserver-app/addons:/app/addons
  #   environment:
  #     <<: *rasa-credentials
  #     RASA_ENVIRONMENT: "worker"
  #     DB_DATABASE: "worker_tracker"
  #     MPLCONFIGDIR: "/tmp/.matplotlib"
  #     RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: all
  #             capabilities: [gpu]
  #   volumes:
  #     - ./botserver-app/data:/app/data/
  #     - ./botserver-app/models:/app/models/
  #     - ./botserver-app/domain.yml:/app/domain.yml
  #     - ./botserver-app/config.yml:/app/config.yml

  action-server:
    restart: on-failure:5
    image: "sysang/actionserver"
    build:
      context: "./botserver-action"
      args:
        RASA_SDK_IMAGE: ${RASA_SDK_IMAGE}
    volumes:
      - ./botserver-action/:/app/actions/
    expose:
      - "5055"
    environment:
      <<: *duckling-credentials
      <<: *redis-credentials
    depends_on:
      - redis

  db:
    restart: on-failure:5
    image: "bitnami/postgresql:11.9.0"
    ports:
      - "54321:5432"
    environment:
      POSTGRESQL_USERNAME: "${DB_USER}"
      POSTGRESQL_PASSWORD: "${DB_PASSWORD}"
      POSTGRESQL_DATABASE: "${DB_DATABASE}"
    volumes:
      - ./mounts/db:/bitnami/postgresql

  rabbit:
    restart: on-failure:5
    image: "bitnami/rabbitmq:3.8.14"
    environment:
      RABBITMQ_HOST: "rabbit"
      RABBITMQ_USERNAME: "user"
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_DISK_FREE_LIMIT: "{mem_relative, 0.1}"
    expose:
      - "5672"

  duckling:
    restart: on-failure:5
    image: "rasa/duckling:0.1.6.5-r0"
    expose:
      - "8000"
    command: ["duckling-example-exe", "--no-access-log", "--no-error-log"]

  nginx:
    restart: on-failure:5
    image: "sysang/httpserver"
    build:
      context: "./httpserver-nginx"
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - ./httpserver-nginx/certbot:/etc/certbot
      - ./httpserver-nginx/certs:/etc/certs
      - ./httpserver-nginx/nginx-config-files/nginx.conf:/etc/nginx/nginx.conf
      - ./httpserver-nginx/nginx-config-files/ssl.conf.template:/etc/nginx/templates/ssl.conf.template
      - ./httpserver-nginx/nginx-config-files/${RASAX_NGINX_TEMPLATE_FILE}:/etc/nginx/templates/rasax.nginx.template
      - ./httpserver-nginx/nginx-config-files/${CHATWOOT_NGINX_TEMPLATE_FILE}:/etc/nginx/templates/chatwoot.nginx.template
      - ./httpserver-nginx/nginx-config-files/chatwoot.ssl.conf.template:/etc/nginx/templates/chatwoot.ssl.conf.template
      - ./botfrontend/static:/var/static
    environment:
      <<: *nginx-host-variables
    depends_on:
      - rasa-x
      - rasa-production
      # - rasa-worker
      - botfrontend

  redis:
    restart: on-failure:5
    image: "bitnami/redis:6.2.1"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    expose:
      - "6379"

  botfrontend:
    restart: on-failure:5
    image: "sysang/botfrontend"
    build:
      context: "./botfrontend"
    volumes:
      - ./botfrontend/:/usr/src/app/
    expose:
      - "8000"

  cwbase: &cwbase
    image: chatwoot/chatwoot:v2.8.1-ce
    env_file: .cw.env
    volumes:
      - ./mounts/cw/storage:/app/storage
    tty: true
    stdin_open: true

  rails:
    <<: *cwbase
    depends_on:
      - cwdb
      - redis
    # ports:
    #   - '3000:3000'
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    entrypoint: docker/entrypoints/rails.sh
    # command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '127.0.0.1']
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000']

  sidekiq:
    <<: *cwbase
    depends_on:
      - cwdb
      - redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']

  cwdb:
    restart: on-failure:5
    image: "bitnami/postgresql:11.9.0"
    ports:
      - "54322:5432"
    environment:
      POSTGRESQL_USERNAME: "${POSTGRES_CWUSER}"
      POSTGRESQL_PASSWORD: "${POSTGRES_CWPASSWORD}"
      POSTGRESQL_DATABASE: "${POSTGRES_CWDB}"
    volumes:
      - ./mounts/cwdb:/bitnami/postgresql
